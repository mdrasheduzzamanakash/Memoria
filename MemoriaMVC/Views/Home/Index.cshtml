@model MemoriaMVC.ViewModel.HomePageViewModel.HomeIndexViewModel

<link rel="stylesheet" href="~/css/Home/index.css" />

<div class="flex-note-container"></div>


<div id="myModal" class="modal" style="display:none">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- modal content goes here -->
        </div>
    </div>
</div>



<script src="~/lib/jquery/dist/jquery.min.js"></script>
@*this script is responsible for opening modals*@
<script>

    var userData = @Html.Raw(Json.Serialize(@Model));

    // for partial modal fetching 

    $(function () {
        $('#btnAddNewNote').off('click').on('click', function () {
            $.ajax({
                url: '/Notes/GetPartialView/' + userData.id,
                type: 'GET',
                success: function (result) {
                    $('#myModal').find('.modal-content').html(result);
                    $('#myModal').modal('show');

                    


                    // ajax-2nd part
                    // model handling part begins from here 
                    {
                        // modal handling code
                        var labelSelect = document.getElementById('labelsSelect');
                        var labelsContainer = document.getElementById('labelsContainer');

                        // label selecting code
                        labelSelect.addEventListener('change', function () {
                            var selectedLabel = labelSelect.value;
                            var labelElement = document.createElement('p');
                            labelElement.classList.add('labels-container-item');
                            labelElement.textContent = selectedLabel;
                            labelsContainer.appendChild(labelElement);
                        })

                        // Get the necessary elements
                        const todoContainer = document.getElementById('todo-container');
                        const addTodoButton = document.getElementById('add-todo');
                        const todoToggle = document.querySelector('#myCheckbox');
                        const todoSection = document.getElementById('todo-section');
                        todoSection.style.display = 'none';
                        const todoInputs = []; // Array to store the todo input elements

                        // Function to create a new todo element
                        function createTodoElement() {
                            const todoElement = document.createElement('div');
                            todoElement.classList.add('form-check');

                            const checkboxElement = document.createElement('input');
                            checkboxElement.classList.add('form-check-input');
                            checkboxElement.type = 'checkbox';

                            const inputElement = document.createElement('input');
                            inputElement.classList.add('form-control');
                            inputElement.placeholder = 'Enter todo';

                            // Append the checkbox and input field to the todo element
                            todoElement.appendChild(checkboxElement);
                            todoElement.appendChild(inputElement);

                            // Append the todo element to the todo container
                            todoContainer.appendChild(todoElement);

                            // Add the input element to the todoInputs array
                            todoInputs.push(inputElement);
                        }
                        addTodoButton.addEventListener('click', createTodoElement);

                        // Event listener for the todo toggle checkbox
                        todoToggle.addEventListener('change', function () {
                            if (this.checked) {
                                todoSection.style.display = 'block'; // Show the todo container
                            } else {
                                todoSection.style.display = 'none'; // Hide the todo container
                            }
                        });

                        // Function to retrieve all the todo inputs
                        function getTodoInputs() {
                            const todoValues = [];
                            for (let i = 0; i < todoInputs.length; i++) {
                                const todoInput = todoInputs[i];
                                const todoValue = todoInput.value.trim();
                                if (todoValue !== '') {
                                    todoValues.push(todoValue);
                                }
                            }
                            return todoValues;
                        }
                    }

                },
                error: function () {
                    alert('Error loading partial view');
                }
            });
        });
        
    });


</script>