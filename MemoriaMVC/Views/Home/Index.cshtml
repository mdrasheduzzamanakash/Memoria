@model MemoriaMVC.ViewModel.HomePageViewModel.HomeIndexViewModel

<style>
    .flex-container {
        display: flex;
        flex-direction: column;
        margin-top: 20px;
        align-items: center;
        justify-content: center;
    }

    .flex-create-note {
        display: flex;
        flex-direction: column;
        padding: 20px;
        width: 700px;
        align-items: center;
        justify-content: center;
    }

    .flex-note-container {
        padding: 20px;
        display: flex;
        flex-wrap: wrap;
        display: flex;
        align-items: stretch;
        justify-content: center;
        padding: 10px;
        
    }

    .flex-note-container-item {
        margin: 10px;
        box-sizing: border-box;
        background-color: #fff;
        border-radius: 8px;
        align-self: flex-start;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 6px 10px rgba(0, 0, 0, 0.1);
        transition: box-shadow 0.3s ease-in-out;
    }

    .flex-note-container-item:hover {
        box-shadow: 0 8px 12px rgba(0, 0, 0, 0.2), 0 12px 20px rgba(0, 0, 0, 0.2);
    }

    .image-preview-in-note {
        width: inherit;
        height: inherit;
    }

    .pdf-preview-in-note {
        width: inherit;
        height: inherit;
        scroll-behavior:unset;
    }

    .note-link-container {
        display:flex;
        flex-direction:column;
    }

</style>

<div class="flex-note-container" id="card-container"></div>
<div id="myModal" class="modal" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- modal content goes here -->
        </div>
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.8.335/pdf.min.js"></script>
<script>var userData = @Html.Raw(Json.Serialize(@Model));</script>
<script src="~/js//noteCreationModal.js"></script>


<script>
    // home page functionality
    $(function () {
        var nonDraftNotes = [];
        var attachments = []; // only one attachment per note is here

        function fetchNonDraftNotes() {
            var deferred = $.Deferred();

            $.ajax({
                url: "/Notes/AllWithOutDraft/",
                data: {
                    authorId: userData.id
                },
                success: function (response) {
                    deferred.resolve(response);
                },
                error: function (xhr, status, error) {
                    console.log("error in fetchNonDraftNotes");
                }
            });

            return deferred.promise();
        }

        function fetchAttachmentPreview(notes) {
            var deferred = $.Deferred();

            var noteIds = ["fs4414rfa", "f42142asdf"];
            for (let i = 0; i < nonDraftNotes.length; i++) {
                noteIds.push(nonDraftNotes[i].id);
            }

            $.ajax({
                url: "/Attachments/AllAttachmentPreview/",
                data: {
                    noteIds: JSON.stringify(noteIds) // Serialize the array as a JSON string
                },
                success: function (response) {
                    attachments = response;
                    deferred.resolve(response);
                },
                error: function (xhr, status, error) {
                    console.log("error in fetchAttachmentPreview");
                }
            });

            return deferred.promise();
        }

        function showAttachmentPreviewToEachCard() {
            try {
                for (var i = 0; i < attachments.length; i++) {
                    try {
                        var attachment = attachments[i];
                        var noteElement = document.getElementById(attachment.noteId);

                        if (attachment.fileType.startsWith('image')) {
                            // Create an img element for image preview
                            var imgElement = document.createElement('img');
                            imgElement.src = 'data:' + attachment.fileType + ';base64,' + attachment.fileBase64;
                            imgElement.classList.add('image-preview-in-note');
                            noteElement.insertBefore(imgElement, noteElement.firstChild);
                        } else if (attachment.fileType === 'application/pdf') {
                            // Create an iframe element for PDF preview
                            var iframeElement = document.createElement('iframe');
                            iframeElement.src = 'data:' + attachment.fileType + ';base64,' + attachment.fileBase64;
                            iframeElement.classList.add('pdf-preview-in-note');
                            noteElement.insertBefore(iframeElement, noteElement.firstChild);
                        }
                    } catch (e) {
                        console.log(e);
                    }
                }
            } catch(ex) {
                console.log(ex);
            }
        }

        function extractLinks(text) {
            try {
                var urlRegex = /(https?:\/\/[^\s]+)/g;
                var urls = text.match(urlRegex);
                return urls;
            } catch(ex) {
                console.log(ex);
            }
        }

        function showRawCard() {
            for(let i = 0;i < nonDraftNotes.length;i++) {
                var cardData = nonDraftNotes[i];
                var maxTitleLength = 50;
                var maxDescriptionLength = 100; // maximum length for description

                // Truncate the description if it exceeds the maximum length
                var truncatedDescription = cardData.description.length > maxDescriptionLength
                    ? cardData.description.slice(0, maxDescriptionLength) + '...'
                    : cardData.description;
                var truncatedTitle = cardData.title.length > maxTitleLength
                    ? cardData.title.slice(0, maxTitleLength) + '...'
                    : cardData.title;

                var todosArray = JSON.parse(cardData.todos);
                todosArray = todosArray.slice(0, 3).map(todo => {
                    if (todo.length > 25) {
                        console.log(todo.length);
                        return todo.slice(0, 25) + '...';
                    } else {
                        return todo;
                    }
                });


                // Create the card HTML using template literals
                var cardHTML = `
                        <div class="flex-note-container-item" style=" width: 18rem;" id="${cardData.id}">

                            <div style="padding:10px;">
                                <div class="">
                                    <h5 class="" style="cursor:pointer;">${truncatedTitle}</h5>
                                    <p class="">${truncatedDescription}</p>
                                </div>
                                <ul class="">
                                    ${todosArray
                                    .map(item => `<li class="">${item}</li>`).join('')}
                                </ul>
                                <div class="note-link-container">
                                    
                                </div>
                            </div>
                        </div>
                `;

                // Append the card HTML to the container
                var cardContainer = document.getElementById('card-container');
                cardContainer.innerHTML += cardHTML;

                var links
            }
        }

        function showLinksPerNote() {
            for(let i = 0;i < nonDraftNotes.length;i++) {
                
                try {
                    var text = nonDraftNotes[i].description;
                    var links = extractLinks(text);
                    if(links != null) {
                        var noteContainer = document.getElementById(nonDraftNotes[i].id);
                        var linkContainer = noteContainer.querySelector('.note-link-container');
                        for(let j = 0;j < links.length;j++) {
                            var link = links[j];
                            var linkText = link.slice(0, 35) + '...';
                            var linkHTML = `<a href="${link}" style="text-decoration: none;
                                                                         color: #808080">${linkText}</a>`;
                            linkContainer.innerHTML += linkHTML;
                        }
                    }
                } catch(ex) {
                    console.log(ex);
                }
                
            }
        }

        fetchNonDraftNotes()
        .then(function(data) {
            nonDraftNotes = data;
            return fetchAttachmentPreview(data);
        })
        .then(function(data) {
            attachments = data;
            showRawCard();
            showAttachmentPreviewToEachCard();
            showLinksPerNote();
        })
    })
</script>

