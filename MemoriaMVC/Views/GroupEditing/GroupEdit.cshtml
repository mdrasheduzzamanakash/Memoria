@model MemoriaMVC.ViewModel.GroupEditing.GroupEditViewModel
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<style>
    #resizable-container {
        display: flex;
        height: 93vh;
    }

    #left-section {
        width: 27%;
        min-width: 200px;
        resize: horizontal;
        overflow: auto;
        background-color: #f8f9fa;
        border: solid 1px gray;     
        position:relative;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 100%;
    }

    #right-section {
        flex-grow: 1;
        background-color: #ffffff;
        border: solid 1px gray;
        overflow: auto;
        padding:5px;
    }

    #options {
        display: flex;
        padding: 10px;
        gap:10px;
        text-align: center;
        justify-content:space-around;
    }

    #column-seperator {
        width:5px;
        background-color:gray;
        cursor: col-resize;
    }

    #button-container {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 10px;
        gap: 10px;
    }

    #left-section-container {
        max-height:inherit;
        flex-grow: 1;
        overflow-y: auto;
        padding-bottom: 10px;
        margin-bottom:35px;
    }

    #left-section-container::-webkit-scrollbar {
        display: none; /* Chrome, Safari, and Opera */
    }

    #left-section::-webkit-scrollbar {
        display:none;
    }

    #right-section::-webkit-scrollbar {
        display:none;
    }

    #rightSectionTitle:focus {
        outline: none;
        border: none;
    }

    #right-section-description:focus {
        outline : none;
        border: none;
    }

</style>
<div id="resizable-container">
    <div id="left-section">
        <div id="options">
            <button class="btn btn-outline-dark"><i class="fas fa-users"></i></button>
            <button class="btn btn-outline-dark"><i class="fas fa-comments"></i></button>
            <button class="btn btn-outline-dark"><i class="fas fa-sync"></i></button>
            <button class="btn btn-outline-dark"><i class="fas fa-cloud-upload-alt"></i></button>

        </div>
        <div id="left-section-container">
            <p>i am another comment</p>
            <p>i am another comment</p>
        </div>
        <div id="button-container">
            <input type="text" id="message-input" class="form-control" placeholder="Type your message...">
            <button id="send-button" class="btn btn-primary"><i class="fas fa-paper-plane"></i></button>
        </div>
    </div>
    <div id="column-seperator"></div>
    <div id="right-section">
        <div id="rightSectionTitle" contenteditable="false" data-placeholder="Enter the title here"></div>
        <hr/>
        <div id="right-section-description" contenteditable="false" data-placeholder="Write description..."></div>
    </div>
</div>


<!--Scripts are here-->
<script>var pageData = @Html.Raw(Json.Serialize(@Model));</script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jsdiff/5.1.0/diff.min.js" integrity="sha512-vco9RAxEuv4PQ+iTQyuKElwoUOcsVdp+WgU6Lgo82ASpDfF7vI66LlWz+CZc2lMdn52tjjLOuHvy8BQJFp8a1A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="~/js//_sharedScript.js"></script>
<script>
   $(function() {
        var divTitle = document.getElementById('rightSectionTitle');
        var placeholderText = divTitle.getAttribute('data-placeholder');
        if (divTitle.textContent === placeholderText) {
            divTitle.textContent = '';
        } else if (divTitle.textContent === '') {
            divTitle.textContent = placeholderText;
        }

        divTitle.addEventListener('focus', function () {
            if (divTitle.textContent === placeholderText) {
                divTitle.textContent = '';
            }
        });

        divTitle.addEventListener('blur', function () {
            if (divTitle.textContent === '') {
                divTitle.textContent = placeholderText;
            }
        });
   })
</script> 
<script>
    $(function() {
        var divDes = document.getElementById('right-section-description');
        var placeholderText = divDes.getAttribute('data-placeholder');
        if (divDes.textContent === placeholderText) {
            divDes.textContent = '';
        } else if (divDes.textContent === '') {
            divDes.textContent = placeholderText;
        }

        divDes.addEventListener('focus', function () {
            if (divDes.textContent === placeholderText) {
                divDes.textContent = '';
            }
        });

        divDes.addEventListener('blur', function () {
            if (divDes.textContent === '') {
                divDes.textContent = placeholderText;
            }
        });
    })
</script>
<script>
    $(document).ready(function () {
        var initialWidth = $("#left-section").width();
        var startX = 0;

        $("#column-seperator").on("mousedown", function (e) {
            startX = e.pageX;
            initialWidth = $("#left-section").width();

            $(document).on("mousemove", resizeLeftSection);
            $(document).on("mouseup", stopResizing);
        });

        function resizeLeftSection(e) {
            var widthDiff = e.pageX - startX;
            var newWidth = initialWidth + widthDiff;

            if (newWidth >= 200) {
                $("#left-section").width(newWidth);
                $("#right-section").width(`calc(100% - ${newWidth}px)`);
            }
        }

        function stopResizing() {
            $(document).off("mousemove", resizeLeftSection);
            $(document).off("mouseup", stopResizing);
        }
    });
</script>
<script>
    $(function() {
        const newNoteButton = document.getElementById('btnAddNewNote');
        const searchBar = document.getElementById('searchBar');
        newNoteButton.style.display = 'none';
        searchBar.style.display = 'none';
    })
</script>


<script>
    $(function () {
        var noteData = null;
        var userData = null;

        const titleElement = document.getElementById('rightSectionTitle');
        const descriptionElement = document.getElementById('right-section-description');

        console.log(pageData);
        const noteChangeConnection = new signalR.HubConnectionBuilder()
            .withUrl("/noteChangeHub")
            .build();

        noteChangeConnection.start()
            .then(() => {
                noteChangeConnection.invoke("JoinNoteGroup", pageData.noteId)
                    .then(() => {
                        // fetch note data
                        fetchNoteById(pageData.noteId)
                            .then(function (fetchedNote) {
                                noteData = fetchedNote;
                                if(noteData.title !== null && noteData.title !== ''){
                                    titleElement.innerText = noteData.title;
                                }
                                if (noteData.description !== null && noteData.description !== '') {
                                    descriptionElement.innerText = noteData.description;
                                }
                                return fetchUserById(pageData.writerId);
                            })
                            .then(function (fetchedUser) {
                                userData = fetchedUser;
                                titleElement.contentEditable = true;
                                descriptionElement.contentEditable = true;
                            })
                    })
            })
            .catch(error => {
                console.error("SignalR connection error: ", error);
            });

        // Receiving function
        noteChangeConnection.on("ReceiveNoteChanges", (noteChangeReceivedString) => {
            var noteChangePayload = JSON.parse(noteChangeReceivedString);

            if (noteChangePayload.IsTitleChanged) {
                titleElement.contentEditable = false;
                titleElement.innerText = noteChangePayload.TitleChanges;
                titleElement.contentEditable = true;
            } else {
                descriptionElement.contentEditable = false;
                descriptionElement.innerHTML = noteChangePayload.DescriptionChanges;
                descriptionElement.contentEditable = true;
            }

        });


        // add change tracking to the input field
        var noteTitleChangeTimer;
        titleElement.addEventListener('input', function (event) {
            clearTimeout(noteTitleChangeTimer);
            noteTitleChangeTimer = setTimeout((function (event) {
                if(titleElement.innerText !== '') {
                    var currentTitle = titleElement.innerText;
                    var noteChangesPaylaodString = JSON.stringify({
                        noteId: pageData.noteId,
                        writerId: pageData.writerId,
                        titleChanges: currentTitle,
                        descriptionChanges: '',
                        isTitleChanged: true,
                        isDescriptionChanged: false
                    });
                    noteChangeConnection.invoke("BroadCastNoteChange", noteChangesPaylaodString);
                }
            }), 500);
        });

        var noteDescriptionTimer;
        descriptionElement.addEventListener('input', function (event) {
            clearTimeout(noteDescriptionTimer);
            noteDescriptionTimer = setTimeout((function (event) {
                var currentDescription = descriptionElement.innerHTML;
                var noteChangesPaylaodString = JSON.stringify({
                    noteId: pageData.noteId,
                    writerId: pageData.writerId,
                    titleChanges: '',
                    descriptionChanges: currentDescription,
                    isTitleChanged: false,
                    isDescriptionChanged: true
                });
                noteChangeConnection.invoke("BroadCastNoteChange", noteChangesPaylaodString);
            }), 500);
        });

        // dispossable sectiton
        window.addEventListener('beforeunload', function (event) {
            noteChangeConnection.stop();
            console.log('stopping the connection');
        });

    })

</script>
